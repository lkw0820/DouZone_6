package kosa.dos;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;

public class Command {
	static File file = new File(".");
	static String now=file.getPath();
	
	public static void show() {
		//File file = new File(".");
		File file = new File(now);
		File[] files = file.listFiles();
		for(int i=0;i<files.length;i++) {
			System.out.println(files[i].getName());
		}
		
	}
	public static void move(String dir) {
		
		//File file = new File(now);
		if(dir.equals(" ")) {
			File parents  = new File(file.getParent());
			now = parents.getPath();
		}else {
			File[] files = file.listFiles();
			for(int i=0;i<files.length;i++) {
				if(dir.equals(files[i].getName())) {
					File child = new File(files[i].getPath());
					now=child.getPath();
//					File[] childs = child.listFiles();
//					for(int j=0;j<childs.length;j++) {
//						System.out.println(childs[j].getName());
//					}
				}else {
					//System.out.println("없음");
				}
			}
		}

		
	}
	public static void make(String name) {
		//File file = new File(now,name);
		file.mkdir();
	}
	
	public static void DirectroyCopy(File source) {
		if(source.isDirectory()) {
			File dest = new File(now,source.getName());
			dest.mkdir();
			//File file = new File(dest.getPath(),source);
			//System.out.println(file.getPath());
			File[] files = source.listFiles();
			for(int i=0;i<files.length;i++) {
				File c = new File(dest.getPath(),files[i].getName());
				if(files[i].isDirectory()) {
					files[i].mkdir();
					DirectroyCopy(c);
				}else {
					fileCopy(c);
				}
			}
		}
		
		

	}
	public static void fileCopy(File source) {
		InputStream is = null;
		OutputStream os = null;
		try {
			is = new FileInputStream(source);
			os = new FileOutputStream(new File(now,source.getName()));
			byte[] data = new byte[1024];
			while(true) {
				int num=is.read(data);
				if(num==-1)break;
				os.write(data,0,num);
			}
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}finally {
			try {
				os.close();
				is.close();
			} catch (Exception e2) {
				// TODO: handle exception
				e2.printStackTrace();
			}
		}
		
	}

}
